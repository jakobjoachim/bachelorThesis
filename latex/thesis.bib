@article{Beschastnikh:2016:DDS:2927299.2940294,
 author = {Beschastnikh, Ivan and Wang, Patty and Brun, Yuriy and Ernst, Michael D},
 title = {Debugging Distributed Systems},
 journal = {Queue},
 issue_date = {March-April 2016},
 volume = {14},
 number = {2},
 month = mar,
 year = {2016},
 issn = {1542-7730},
 pages = {50:91--50:110},
 articleno = {50},
 numpages = {20},
 url = {http://doi.acm.org/10.1145/2927299.2940294},
 doi = {10.1145/2927299.2940294},
 acmid = {2940294},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@book{Lamport:2002:SST:579617,
 author = {Lamport, Leslie},
 title = {Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers},
 year = {2002},
 isbn = {032114306X},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}

@Article{Havelund2000,
author="Havelund, Klaus
and Pressburger, Thomas",
title="Model checking JAVA programs using JAVA PathFinder",
journal="International Journal on Software Tools for Technology Transfer",
year="2000",
volume="2",
number="4",
pages="366--381",
abstract="This paper describes a translator called Java PathFinder (Jpf), which translates from Java to Promela, the modeling language of the Spin model checker. Jpf translates a given Java program into a Promela model, which then can be model checked using Spin. The Java program may contain assertions, which are translated into similar assertions in the Promela model. The Spin model checker will then look for deadlocks and violations of any stated assertions. Jpf generates a Promela model with the same state space characteristics as the Java program. Hence, the Java program must have a finite and tractable state space. This work should be seen in a broader attempt to make formal methods applicable within NASA's areas such as space, aviation, and robotics. The work is a continuation of an effort to formally analyze, using Spin, a multi-threaded operating system for the Deep-Space 1 space craft, and of previous work in applying existing model checkers and theorem provers to real applications.",
issn="1433-2779",
doi="10.1007/s100090050043",
url="http://dx.doi.org/10.1007/s100090050043"
}

@inproceedings{Leungwattanakit:2011:MCD:2190078.2190163,
 author = {Leungwattanakit, Watcharin and Artho, Cyrille and Hagiya, Masami and Tanabe, Yoshinori and Yamamoto, Mitsuharu},
 title = {Model Checking Distributed Systems by Combining Caching and Process Checkpointing},
 booktitle = {Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering},
 series = {ASE '11},
 year = {2011},
 isbn = {978-1-4577-1638-6},
 pages = {103--112},
 numpages = {10},
 url = {http://dx.doi.org/10.1109/ASE.2011.6100043},
 doi = {10.1109/ASE.2011.6100043},
 acmid = {2190163},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

@article{Newcombe:2015:AWS:2749359.2699417,
 author = {Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
 title = {How Amazon Web Services Uses Formal Methods},
 journal = {Commun. ACM},
 issue_date = {April 2015},
 volume = {58},
 number = {4},
 month = mar,
 year = {2015},
 issn = {0001-0782},
 pages = {66--73},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/2699417},
 doi = {10.1145/2699417},
 acmid = {2699417},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@misc{ApacheFlink,
  title = {Apache Flink},
  howpublished = {https://flink.apache.org/introduction.html},
  note = {Accessed: 2017-05-14}
}
